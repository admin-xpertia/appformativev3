import { ChatOpenAI, OpenAIEmbeddings } from "@langchain/openai";
import { PromptTemplate } from "@langchain/core/prompts";
import { StringOutputParser } from "@langchain/core/output_parsers";
import { QdrantClient, Schemas } from "@qdrant/js-client-rest";
import { IConversationMessage } from "../../../../packages/types";

const model = new ChatOpenAI({ model: "gpt-4o" });
const embeddings = new OpenAIEmbeddings({ model: "text-embedding-3-small" });
const qdrantClient = new QdrantClient({
    url: process.env.QDRANT_URL!,
    apiKey: process.env.QDRANT_API_KEY!,
});
const collectionName = "procedimientos-aguas-nuevas";

const promptTemplate = PromptTemplate.fromTemplate(
    `# ROL Y MISI√ìN
Act√∫a como un Analista de Cumplimiento y Calidad (QA) de "Aguas Nuevas". Eres una herramienta de precisi√≥n, no un int√©rprete. Tu √∫nica misi√≥n es auditar de forma objetiva y forense una transcripci√≥n de servicio al cliente, comparando las acciones del ejecutivo estrictamente contra los procedimientos proporcionados. Tu juicio debe ser fr√≠o, basado en evidencia y sin ninguna inferencia o suposici√≥n.

# MATERIALES DE AUDITOR√çA

### ## 1. PROCEDIMIENTOS DE REFERENCIA (√öNICA FUENTE DE VERDAD)
Este es el √∫nico conocimiento que posees. Cualquier cosa fuera de este texto es desconocida para ti.
{context}

### ## 2. TRANSCRIPCI√ìN A EVALUAR
Analiza √∫nicamente las intervenciones del 'user', que es el ejecutivo. Las intervenciones del 'ai' (el cliente) solo sirven para dar contexto a las respuestas del ejecutivo.
{conversation}

# PROCESO DE AN√ÅLISIS FORENSE (TU RAZONAMIENTO OBLIGATORIO)

Antes de generar el informe, sigue estos pasos mentales:
1.  **Extraer Acciones del Ejecutivo:** Lee la transcripci√≥n completa e identifica cada acci√≥n, decisi√≥n o declaraci√≥n clave realizada por el 'user' (el ejecutivo).
2.  **Cotejo Sem√°ntico con el Manual:** Para cada acci√≥n extra√≠da, busca en los PROCEDIMIENTOS DE REFERENCIA. Tu objetivo es determinar si existe un procedimiento que cubra la **intenci√≥n o el significado** de la acci√≥n del ejecutivo (equivalencia sem√°ntica). (Tienes una herramienta RAG documental para esto)
3.  **Clasificar y Citar Evidencia:**
    * Si la acci√≥n del ejecutivo se alinea con la intenci√≥n de un procedimiento, clasif√≠cala como "Acierto Normativo".
    * Si la acci√≥n contradice, ignora o aplica incorrectamente un procedimiento, clasif√≠cala como "Desacierto o Omisi√≥n".
    * Si la acci√≥n no tiene una correspondencia sem√°ntica en los procedimientos proporcionados, clasif√≠cala como "Punto No Contemplado en el Manual".
    * **Para cada Acierto y Desacierto, DEBES copiar y pegar la frase exacta del procedimiento que justifica tu evaluaci√≥n. Esta es tu evidencia.**`

    
);

const normativeChain = promptTemplate.pipe(model).pipe(new StringOutputParser());

export async function runNormativeCheck(conversationHistory: IConversationMessage[]): Promise<string> {
    console.log("üïµÔ∏è  Agente Normativo: Iniciando an√°lisis...");

    const conversationText = conversationHistory.map(m => `${m.sender}: ${m.content}`).join("\n");
    const queryVector = await embeddings.embedQuery(conversationText);

    const searchResults = await qdrantClient.search(collectionName, {
        vector: queryVector,
        limit: 3, 
    });

    // Ahora que 'Schemas' est√° importado, esta l√≠nea es v√°lida.
    const context = searchResults
        .filter(result => result.payload?.text)
        .map(result => (result.payload as Schemas['Payload']).text as string)

        .join("\n---\n");

    if (!context) {
        console.warn("‚ö†Ô∏è No se encontr√≥ contexto relevante en la base de conocimiento.");
        return "No se pudo realizar el an√°lisis normativo porque no se encontr√≥ informaci√≥n relevante en el manual.";
    }

    const analysis = await normativeChain.invoke({
        context,
        conversation: conversationText,
    });

    console.log("‚úÖ Agente Normativo: An√°lisis completado.");
    return analysis;
}