import { ChatOpenAI } from "@langchain/openai";
import { PromptTemplate } from "@langchain/core/prompts";
import { StringOutputParser } from "@langchain/core/output_parsers";

// 1. Definimos el modelo que vamos a usar.
// LangChain leer치 autom치ticamente la variable de entorno OPENAI_API_KEY.
const model = new ChatOpenAI({
  model: "gpt-4.1-mini", // Puedes usar "gpt-3.5-turbo" si prefieres
  temperature: 0.7, // Un valor entre 0 (muy determinista) y 1 (muy creativo)
});

// 2. Creamos una plantilla para el prompt.
// Esto es como un "f-string" de Python o una plantilla de texto.
const promptTemplate = PromptTemplate.fromTemplate(
  `# ROL Y OBJETIVO
Act칰a como un Director de Capacitaci칩n experto en "Aguas Nuevas", con la misi칩n de preparar a un ejecutivo para una simulaci칩n cr칤tica de atenci칩n al cliente. Tu objetivo es transformar la informaci칩n t칠cnica del ejercicio en un briefing de misi칩n claro, motivador y conciso que establezca el escenario y el prop칩sito.

# CONTEXTO DEL EJERCICIO
- **T칤tulo del Caso:** {caseTitle}
- **Nivel de Dificultad:** {level}
- **Metas de Aprendizaje:** {levelObjectives}

# INSTRUCCIONES DE GENERACI칍N
1.  **Redacta un 칰nico p치rrafo** de no m치s de 80 palabras (aproximadamente 3-4 frases).
2.  El p치rrafo debe funcionar como una "Descripci칩n de Misi칩n" para el ejecutivo.
3.  **Contenido Obligatorio:**
    - Da una bienvenida profesional al ejecutivo.
    - Integra de forma natural el t칤tulo del caso ('{caseTitle}') y el nivel de dificultad ('{level}').
    - Describe brevemente el escenario que enfrentar치, extrayendo la esencia de las "Metas de Aprendizaje" sin listarlas.
4.  **Tono:** Profesional, motivador y directo. Infunde un sentido de prop칩sito y desaf칤o.

# RESTRICCIONES
- **Absolutamente prohibido:** No uses t칤tulos, vi침etas, saludos gen칠ricos (como "Hola") o frases introductorias como "Tu misi칩n es:".
- **Formato:** Entrega 칰nicamente el p치rrafo de texto sin formato, no uses markdown ni HTML.
`
);

// 3. Creamos un parser para asegurarnos de que la salida sea un string.
const outputParser = new StringOutputParser();

// 4. Creamos el "Chain" (la cadena)
// Conectamos la plantilla, el modelo y el parser en una secuencia.
const introductionChain = promptTemplate.pipe(model).pipe(outputParser);

/**
 * Genera el texto de briefing para una simulaci칩n.
 * @param caseTitle El t칤tulo del caso (ej. "Sobreconsumo").
 * @param level El nivel de dificultad (ej. "Bronce").
 * @param levelObjectives La descripci칩n de los objetivos para ese nivel.
 * @returns Una promesa que se resuelve con el texto del briefing.
 */
export async function generateBriefing(caseTitle: string, level: string, levelObjectives: string) {
  console.log("游뱄 Agente de Introducci칩n: Generando briefing...");
  const briefing = await introductionChain.invoke({
    caseTitle,
    level,
    levelObjectives,
  });
  console.log("游뱄 Agente de Introducci칩n: Briefing generado.");
  return briefing;
}